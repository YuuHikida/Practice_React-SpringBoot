version: '3.9'  # Docker Composeのバージョンを指定します

services:
  mysql-container:  # MySQLサービスの設定開始
    image: mysql:8.0 # 使用するMySQLのイメージを指定します
    environment:  # 環境変数を設定します
      MYSQL_ROOT_PASSWORD: 1121  # MySQLのrootユーザーのパスワードを指定
      MYSQL_DATABASE: my_database  # 作成するデータベースの名前
      MYSQL_USER: appp  # 作成するデータベースユーザーの名前
      MYSQL_PASSWORD: appp  # データベースユーザーのパスワードを指定
    ports:
      - "3306:3306"  # ホストのポート3306をコンテナのポート3306にマッピングします
    volumes:
      - ./src/main/resources/init.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - my-network


  springBoot-app:  # Spring Bootアプリケーション（バックエンド）の設定開始
    image: springboot-app
    build:
      context: .  # `Backup-docker-compose.yml` から見たビルドコンテキストを指定します
      dockerfile: src/Dockerfile  # `Backup-docker-compose.yml` から見たDockerfileの相対パスを指定します
    ports:
      - "8080:8080"  # ホストのポート8080をコンテナのポート8080にマッピングします# - "ホスト側のポート:コンテナ側のポート"
    volumes:
      - /Users/user/Desktop/react_SpringBoot_practice:/app
    depends_on:
      - mysql-container  # MySQLコンテナが起動してからSpring Bootアプリケーションを起動する
    environment:  # 環境変数を設定します
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-container:3306/my_database  # データソースのURLを指定します（dbサービスを指します）
      SPRING_DATASOURCE_USERNAME: appp  # データベースユーザーの名前を指定します
      SPRING_DATASOURCE_PASSWORD: appp  # データベースユーザーのパスワードを指定します
    networks:
      - my-network

  frontend:  # Reactアプリケーション（フロントエンド）の設定開始
    build:
      context: ./reactapp  # `Backup-docker-compose.yml` から見たビルドコンテキスト
      dockerfile: Dockerfile
    container_name: react  # コンテナの名前を指定します
    ports:
      - "3000:80"  # ホストのポート3000をコンテナのポート3000にマッピングします
      # - "ホスト側のポート:コンテナ側のポート"
    volumes:
      - ./reactapp/src:/usr/share/nginx/html/src
    depends_on:
      - backend  # backendサービスが起動している必要があります
    networks:
      - my-network

volumes:
  db_data:  # MySQLデータの永続化に使うボリュームを定義します

networks:
  my-network: