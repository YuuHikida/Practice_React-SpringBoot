{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/react_SpringBoot_practice/reactapp/src/components/EntityList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EntityList = () => {\n  _s();\n  const [entities, setEntities] = useState([]);\n\n  /*  依存配列を空指定しているので\n    初回のレンダリング=マウント時に一回のみ起動*/\n  useEffect(() => {\n    axios.get('http://localhost:8080/api/name').then(response => {\n      setEntities(response.data);\n    }).catch(error => {\n      console.error('There was an error fetching the data!', error);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Entities\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: entities.map(entity => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: entity.name\n      }, entity.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(EntityList, \"hSvn9iFGa0gGPZvrwFN2Qj1D1t4=\");\n_c = EntityList;\nexport default EntityList;\nvar _c;\n$RefreshReg$(_c, \"EntityList\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","EntityList","_s","entities","setEntities","get","then","response","data","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","map","entity","name","id","_c","$RefreshReg$"],"sources":["/Users/user/Desktop/react_SpringBoot_practice/reactapp/src/components/EntityList.jsx"],"sourcesContent":["\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nconst EntityList = () => {\n  const [entities, setEntities] = useState([]);\n\n/*  依存配列を空指定しているので\n  初回のレンダリング=マウント時に一回のみ起動*/\n  useEffect(() => {\n    axios.get('http://localhost:8080/api/name')\n      .then(response => {\n        setEntities(response.data);\n      })\n      .catch(error => {\n        console.error('There was an error fetching the data!', error);\n      });\n  }, []);\n\n  return (\n    <div>\n      <h1>Entities</h1>\n      <ul>\n        {entities.map(entity => (\n          <li key={entity.id}>{entity.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default EntityList;"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;;EAE9C;AACA;EACED,SAAS,CAAC,MAAM;IACdE,KAAK,CAACO,GAAG,CAAC,gCAAgC,CAAC,CACxCC,IAAI,CAACC,QAAQ,IAAI;MAChBH,WAAW,CAACG,QAAQ,CAACC,IAAI,CAAC;IAC5B,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACdC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;IAC/D,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEV,OAAA;IAAAY,QAAA,gBACEZ,OAAA;MAAAY,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjBhB,OAAA;MAAAY,QAAA,EACGT,QAAQ,CAACc,GAAG,CAACC,MAAM,iBAClBlB,OAAA;QAAAY,QAAA,EAAqBM,MAAM,CAACC;MAAI,GAAvBD,MAAM,CAACE,EAAE;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAmB,CACtC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAAAd,EAAA,CAzBKD,UAAU;AAAAoB,EAAA,GAAVpB,UAAU;AA2BhB,eAAeA,UAAU;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}